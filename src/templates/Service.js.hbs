package {{packageName}}.service;

import {{packageName}}.entity.{{entityName}};
import {{packageName}}.dto.{{entityName}}DTO;
import {{packageName}}.mapper.{{entityName}}Mapper;
import {{packageName}}.repository.{{entityName}}Repository;
import org.springframework.stereotype.Service;
import jakarta.validation.Valid;
import lombok.AllArgsConstructor;

import java.util.List;
import java.util.Optional;

@AllArgsConstructor
@Service
public class {{entityName}}Service {

    private final {{entityName}}Repository {{uncapitalizedEntityName}}Repository;
    private final {{entityName}}Mapper {{uncapitalizedEntityName}}Mapper;

    public {{entityName}}DTO save(@Valid {{entityName}}DTO dto) {
        {{entityName}} entity = {{uncapitalizedEntityName}}Mapper.convertToEntity(dto);
        entity = {{uncapitalizedEntityName}}Repository.save(entity);
        return {{uncapitalizedEntityName}}Mapper.convertToDto(entity);
    }

    public List<{{entityName}}DTO> findAll() {
        return {{uncapitalizedEntityName}}Repository.findAll().stream()
                .map({{uncapitalizedEntityName}}Mapper::convertToDto)
                .toList();
    }

    public {{entityName}}DTO findById(String id) {
        Optional<{{entityName}}> {{uncapitalizedEntityName}} = {{uncapitalizedEntityName}}Repository.findById(id);
        return {{uncapitalizedEntityName}}
                .map({{uncapitalizedEntityName}}Mapper::convertToDto)
                .orElse(null);
    }

    public {{entityName}}DTO update(String id, @Valid {{entityName}}DTO dto) {
        Optional<{{entityName}}> {{uncapitalizedEntityName}} = {{uncapitalizedEntityName}}Repository.findById(id);
        {{entityName}} finalEntity;
        if ({{uncapitalizedEntityName}}.isEmpty()) {
            return null;
        }
        finalEntity = {{uncapitalizedEntityName}}.get();
        {{#each fields}}
        {{#if (and this.includeInDto (not this.isId))}}
        finalEntity.set{{capitalize this.name}}(dto.get{{capitalize this.name}}());
        {{/if}}
        {{/each}}
        finalEntity = {{uncapitalizedEntityName}}Repository.save(finalEntity);
        
        return {{uncapitalizedEntityName}}Mapper.convertToDto(finalEntity);
    }

    public void delete(String id) {
        {{uncapitalizedEntityName}}Repository.deleteById(id);
    }
}
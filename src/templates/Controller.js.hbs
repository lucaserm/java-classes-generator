package {{packageName}}.controller;

import {{packageName}}.dto.{{entityName}}DTO;
import {{packageName}}.service.{{entityName}}Service;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import jakarta.validation.Valid;
import lombok.AllArgsConstructor;

import java.util.List;

@AllArgsConstructor
@RestController
@RequestMapping("/api/{{uncapitalizedEntityName}}s")
public class {{entityName}}Controller {

    private final {{entityName}}Service {{uncapitalizedEntityName}}Service;

    @PostMapping
    public ResponseEntity<{{entityName}}DTO> create{{entityName}}(@Valid @RequestBody {{entityName}}DTO {{uncapitalizedEntityName}}DTO) {
        var {{uncapitalizedEntityName}} = {{uncapitalizedEntityName}}Service.save({{uncapitalizedEntityName}}DTO);
        return ResponseEntity.status(HttpStatus.CREATED).body({{uncapitalizedEntityName}});
    }

    @GetMapping
    public ResponseEntity<List<{{entityName}}DTO>> getAll{{entityName}}s() {
        var {{uncapitalizedEntityName}}s = {{uncapitalizedEntityName}}Service.findAll();
        return ResponseEntity.ok().body({{uncapitalizedEntityName}}s);
    }

    @GetMapping("/{id}")
    public ResponseEntity<{{entityName}}DTO> get{{entityName}}ById(@PathVariable String id) {
        var {{uncapitalizedEntityName}} = {{uncapitalizedEntityName}}Service.findById(id);
        return ResponseEntity.ok().body({{uncapitalizedEntityName}});
    }

    @PutMapping("/{id}")
    public ResponseEntity<{{entityName}}DTO> update{{entityName}}(@PathVariable String id, @Valid @RequestBody {{entityName}}DTO {{uncapitalizedEntityName}}DTO) {
        var {{uncapitalizedEntityName}} = {{uncapitalizedEntityName}}Service.update(id, {{uncapitalizedEntityName}}DTO);
        return ResponseEntity.ok().body({{uncapitalizedEntityName}});
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> delete{{entityName}}(@PathVariable String id) {
        {{uncapitalizedEntityName}}Service.delete(id);
        return ResponseEntity.status(HttpStatus.NO_CONTENT).build();
    }
}